	defmodule RPNCalculatorInspection do
	  def start_reliability_check(calculator, input) do
		# Please implement the start_reliability_check/2 function
		pid = spawn_link(fn -> calculator.(input) end)
		%{input: input, pid: pid}
	  end

	  def await_reliability_check_result(%{pid: pid, input: input}, results) do
		# Please implement the await_reliability_check_result/2 function
		receive do
		  {:EXIT, ^pid, :normal} ->
			Map.put(results, input, :ok)
		  
		  {:EXIT, ^pid, _reason} ->
			Map.put(results, input, :error)
		  
		  after 100 ->
			Map.put(results, input, :timeout)
		end
	  end

	  def reliability_check(calculator, inputs) do
		# Please implement the reliability_check/2 function
		original_trap_exit = Process.flag(:trap_exit, true)
		pid_results =  Enum.map(inputs, fn input ->
		  start_reliability_check(calculator, input)
		end)
		|> Enum.map(&await_reliability_check_result(&1, %{}))
		 Process.flag(:trap_exit, original_trap_exit)
		 List.foldl(pid_results, %{}, fn map, acc ->
			Map.merge(acc, map)
		  end)
	  end

	  def correctness_check(calculator, inputs) do
		# Please implement the correctness_check/2 function
		inputs
		|> Enum.map(&Task.async(fn -> calculator.(&1) end))
		|> Enum.map(&Task.await(&1,100))
	  end
	end
