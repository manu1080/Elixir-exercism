	# Use the Plot struct as it is provided
	defmodule Plot do
	  @enforce_keys [:plot_id, :registered_to]
	  defstruct [:plot_id, :registered_to]
	end

	defmodule CommunityGarden do
	  use Agent
	  def start_link(initial_value \\ {[],0}) do
		Agent.start_link(fn -> initial_value end, name: __MODULE__)
	  end
	  def start(opts \\ {[],0}) do
		# Please implement the start/1 function
		start_link(opts)
	  end

	  def list_registrations(pid) do
		# Please implement the list_registrations/1 function
		{plots,_}= Agent.get(pid, fn state -> state end)
		plots
	  end

	  def list_by_pids(pid) do
		# Please implement the list_registrations/1 function
		Agent.get(pid, fn state -> state end)
	  end

	  def register(pid, register_to) do
		# Please implement the register/2 function
		{plots, count} = list_by_pids(pid)

		id = count + 1
		
		plot = %Plot{plot_id: id, registered_to: register_to}
		Agent.update(pid, fn state ->
		  {plots,_}= state
		  {[plot | plots], id}
		end)

		plot
	  end

	  def release(pid, plot_id) do
		# Please implement the release/2 function
		Agent.update(pid, fn state ->
		  {plots,count}= state
		  updated_plots = Enum.filter(plots, fn plot -> plot.plot_id != plot_id end)
		  {updated_plots, count}
		end)
	  end

	  def get_registration(pid, plot_id) do
		# Please implement the get_registration/2 function
		result =Agent.get(pid, fn state ->
		  {plots,count}= state
		  Enum.find(plots, fn plot -> plot.plot_id == plot_id end)
		end)
		
		if result != nil, do: result, else: {:not_found,"plot is unregistered"}
	  end
	end
