defmodule BoutiqueInventory do
  def sort_by_price(inventory) do
    # Please implement the sort_by_price/1 function
    Enum.sort_by(inventory,&(&1.price), :asc)
  end
  def with_missing_price(inventory) do
    # Please implement the with_missing_price/1 function
    Enum.filter(inventory, fn price -> price.price == nil end)
  end
  def update_names(inventory, old_word, new_word) do
    # Please implement the update_names/3 function
    Enum.map(inventory, fn x -> %{"name": String.replace(x.name,old_word,new_word), "price": x.price, "quantity_by_size": x.quantity_by_size} end)
  end
  def increase_quantity(item, count) do
    # Please implement the increase_quantity/2 function
    result = Enum.into(item.quantity_by_size, item.quantity_by_size, fn {k, v} -> {k, v + count} end)
    %{"name": item.name, "price": item.price, "quantity_by_size": result}
  end
  def total_quantity(item) do
    # Please implement the total_quantity/1 function
    result = Enum.into(item.quantity_by_size, [], fn {k, v} -> v end)
    Enum.reduce(result, 0, fn x, acc -> x + acc end)
  end
end
